<?php namespace App\Http\Controllers;

use Session;
use Request;
use DB;
use CRUDbooster;
use Illuminate\Support\Facades\Log;

class AdminCmsUsersController extends CBExtendController {


	public function cbInit() {
		# START CONFIGURATION DO NOT REMOVE THIS LINE
		$this->table               = 'cms_users';
		$this->primary_key         = 'id';
		$this->title_field         = "name";
		$this->button_action_style = 'button_icon_text';
		$this->button_import 	   = FALSE;	
		$this->button_export 	   = FALSE;	
		# END CONFIGURATION DO NOT REMOVE THIS LINE
	
		# START COLUMNS DO NOT REMOVE THIS LINE
		$this->col = array();
		$this->col[] = array("label"=>"Tên","name"=>"name");
        $this->col[] = array("label"=>"Email","name"=>"email");
        $this->col[] = array("label"=>"Mã nhân viên","name"=>"employee_code");
//        $this->col[] = array("label"=>"Kho hàng","name"=>"stock_id","join"=>"gold_stocks,name");
        // $this->col[] = array("label"=>"Cửa hàng","name"=>"brand_id","join"=>"gold_brands,name");
        $this->col[] = array("label"=>"Công nợ","name"=>"balance","callback_php"=>'number_format($row->balance, 0)');
        $this->col[] = array("label"=>"Công nợ Q10","name"=>"q10","callback_php"=>'number_format($row->q10, 4)');
		$this->col[] = array("label"=>"Vai trò","name"=>"id_cms_privileges","join"=>"cms_privileges,name");
        $this->col[] = array("label"=>"Ảnh đại diện","name"=>"photo","image"=>1);
        $this->col[] = array("label"=>"Trạng thái","name"=>"status","callback_php"=>'get_user_status($row->status);');
		# END COLUMNS DO NOT REMOVE THIS LINE

		# START FORM DO NOT REMOVE THIS LINE
		$this->form = array(); 		
		$this->form[] = array("label"=>"Tên","name"=>"name",'required'=>true,'validation'=>'required|alpha_spaces|min:3','width'=>'col-sm-4',"help"=>"Tên hiển thị");
		$this->form[] = array("label"=>"Email","name"=>"email",'required'=>true,'type'=>'email','validation'=>'required|email|unique:cms_users,email,'.CRUDBooster::getCurrentId(),'width'=>'col-sm-4',"help"=>"Dùng để đăng nhập");
        $this->form[] = array("label"=>"Mã nhân viên","name"=>"employee_code",'width'=>'col-sm-4',"help"=>"Mã nhân viên sẽ xuất hiện trong báo cáo bán hàng");
        $this->form[] = array('label'=>'Kho hàng','name'=>'stock_id','type'=>'select2','width'=>'col-sm-4','datatable'=>'gold_stocks,name',"help"=>"Bạn có thể chọn nhiều kho");
//        $this->form[] = ['label'=>'Kho hàng','type'=>'select2','datatable'=>'gold_stocks,name','relationship_table'=>'gold_stocks_cms_users'];
        $this->form[] = array('label'=>'Cửa hàng','name'=>'brand_id','type'=>'select2','width'=>'col-sm-4','datatable'=>'gold_brands,name',"help"=>"Bạn có thể chọn nhiều cửa hàng");
        $this->form[] = array("label"=>"Ảnh đại diện","name"=>"photo","type"=>"upload","help"=>"Kích thước được đề xuất là 200x200 px",'required'=>true,'validation'=>'required|image|max:1000','resize_width'=>200,'resize_height'=>200,'width'=>'col-sm-4');
		$this->form[] = array("label"=>"Vài trò","name"=>"id_cms_privileges","type"=>"select","datatable"=>"cms_privileges,name",'datatable_where'=>'id != 1','required'=>true,'width'=>'col-sm-4');
		$this->form[] = array("label"=>"Mật khẩu","name"=>"password","type"=>"password",'width'=>'col-sm-4',"help"=>"Vui lòng để trống nếu bạn không muốn đổi mật khẩu");
		# END FORM DO NOT REMOVE THIS LINE
                
        $this->addaction = array();
        if(CRUDBooster::myPrivilegeId() != 2){
            $this->addaction[] = ['label'=>'Bảng kê','url'=>CRUDBooster::mainpath('print-list/[id]'),'icon'=>'fa fa-print','color'=>'info'];
        }
	}
	public function hook_query_index(&$query) {
        //Your code here
        if(CRUDBooster::myPrivilegeId() != 1)// supper admin
        {
            $query->where('cms_users.id_cms_privileges', '<>', 1);
        }
    }
    public function getAdd()
    {
        $view = parent::getAdd(); // TODO: Change the autogenerated stub
//        Log::debug('$view = '.$view);

        $view = str_replace('name="stock_id"', 'name="stock_id[]" multiple="multiple"', $view);
        $view = str_replace('name="brand_id"', 'name="brand_id[]" multiple="multiple"', $view);
        return $view;
    }

    public function getEdit($id)
    {
        $view = parent::getEdit($id); // TODO: Change the autogenerated stub
        $view = str_replace('name="stock_id"', 'name="stock_id[]" multiple="multiple"', $view);
        $view = str_replace('name="brand_id"', 'name="brand_id[]" multiple="multiple"', $view);
        $user = DB::table('cms_users as U')->where('U.id', $id)->first();
        if($user){
            $view = str_replace("$('#stock_id').select2();", "$('#stock_id').select2().val([".$user->stock_id."]).trigger('change');", $view);
            $view = str_replace("$('#brand_id').select2();", "$('#brand_id').select2().val([".$user->brand_id."]).trigger('change');", $view);
        }
        // Log::debug('$view = '.$view);
        return $view;
    }

    public function hook_before_add(&$arr)
    {
        if($arr['stock_id']) {
           $arr['stock_id'] = join(',', $arr['stock_id']);
        }
        if($arr['brand_id']) {
            $arr['brand_id'] = join(',', $arr['brand_id']);
        }
    }

    public function hook_before_edit(&$arr, $id)
    {
        if($arr['stock_id']) {
            $arr['stock_id'] = join(',', $arr['stock_id']);
        }
        if($arr['brand_id']) {
            $arr['brand_id'] = join(',', $arr['brand_id']);
        }
    }

    public function getProfile() {

		$this->button_addmore = FALSE;
		$this->button_cancel  = FALSE;
		$this->button_show    = FALSE;			
		$this->button_add     = FALSE;
		$this->button_delete  = FALSE;	
		$this->hide_form 	  = ['id_cms_privileges'];

		$data['page_title'] = trans("crudbooster.label_button_profile");
		$data['row']        = CRUDBooster::first('cms_users',CRUDBooster::myId());		
		$this->cbView('crudbooster::default.form',$data);				
    }
    
    public function getUsers(){
        //First, Add an auth
        if(!CRUDBooster::isView()) CRUDBooster::redirect(CRUDBooster::adminPath(),trans('crudbooster.denied_access'));
        if(CRUDBooster::myPrivilegeId() == 1) {
            $users = DB::table('cms_users')->orderBy('employee_code')->get();
        }else{
            $users = DB::table('cms_users')->whereRaw('id <> 1')->orderBy('employee_code')->get();
        }
        return ['users'=>$users];
    }

    public function getUser(){
        //First, Add an auth
        if(!CRUDBooster::isView()) CRUDBooster::redirect(CRUDBooster::adminPath(),trans('crudbooster.denied_access'));
        $para = Request::all();
        $id = $para['id'];
        $user = DB::table('cms_users')->where('id', $id)->first();
        return ['user'=>$user];
    }

    public function getBalance() {
        //            $para = Request::all();
        $data = [];
        $data['page_title'] = 'Công nợ nhân viên';
        $this->cbView('user_balance_form', $data);
    }
    
    public function getPrintList($id) {
        $jasper = new JasperPHP();
        $database = \Config::get('database.connections.mysql');
        $filename = 'UB_'.time();
        $parameter = [
            'id'=>$id,
            'logo'=>storage_path().'/app/uploads/logo.png'
        ];
        $input = base_path().'/app/Reports/rpt_user_list.jasper';
        $output = public_path().'/output_reports/'.$filename;
        $jasper->process($input, $output, array('pdf'), $parameter, $database)->execute();

        while (!file_exists($output.'.pdf' )){
            sleep(1);
        }

        $file = File::get( $output.'.pdf' );

        return Response::make($file, 200,
            array(
                'Content-type' => 'application/pdf',
                'Content-Disposition' => 'filename="'.$filename.'.pdf"'
            )
        );
    }

    public function getPrintBalance($para) {
        $jasper = new JasperPHP();
        $database = \Config::get('database.connections.mysql');
        $filename = 'SB_'.time();
        $para_values = explode("@", $para);
        $parameter = [
            'to_date'=>$para_values[0],
            'brand_id'=>$para_values[1],
            'ids'=>$para_values[2],
            'logo'=>storage_path().'/app/uploads/logo.png'
        ];

        $input = base_path().'/app/Reports/rpt_supplier_balance.jasper';
        $output = public_path().'/output_reports/'.$filename;
        $jasper->process($input, $output, array('pdf'), $parameter, $database)->execute();

        while (!file_exists($output.'.pdf' )){
            sleep(1);
        }

        $file = File::get( $output.'.pdf' );

        return Response::make($file, 200,
            array(
                'Content-type' => 'application/pdf',
                'Content-Disposition' => 'filename="'.$filename.'.pdf"'
            )
        );
    }

    public function getPrintBalanceXlsx($para) {
        $jasper = new JasperPHP();
        $database = \Config::get('database.connections.mysql');
        $filename = 'SB_'.time();
        $para_values = explode("@", $para);
        $parameter = [
            // 'from_date'=>$para_values[0],
            'to_date'=>$para_values[0],
            'brand_id'=>$para_values[1],
            'ids'=>$para_values[2],
            'logo'=>storage_path().'/app/uploads/logo.png'
        ];
        $input = base_path().'/app/Reports/rpt_supplier_balance.jasper';
        $output = public_path().'/output_reports/'.$filename;
        $jasper->process($input, $output, array('xlsx'), $parameter, $database)->execute();

        while (!file_exists($output . '.xlsx' )){
            sleep(1);
        }

        $file = File::get( $output . '.xlsx' );
        unlink($output . '.xlsx');

        return Response::make($file, 200,
            array(
                'Content-type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'Content-Disposition' => 'filename="'.$filename.'.xlsx"'
            )
        );
    }

    public function getPrintBalanceDetail($para) {
        $jasper = new JasperPHP();
        $database = \Config::get('database.connections.mysql');
        $filename = 'SB_'.time();
        $para_values = explode("@", $para);
        $parameter = [
            'from_date'=>$para_values[0],
            'to_date'=>$para_values[1],
            'brand_id'=>$para_values[2],
            'ids'=>$para_values[3],
            'logo'=>storage_path().'/app/uploads/logo.png'
        ];

        $input = base_path().'/app/Reports/rpt_supplier_balance_detail.jasper';
        $output = public_path().'/output_reports/'.$filename;
        $jasper->process($input, $output, array('pdf'), $parameter, $database)->execute();

        while (!file_exists($output.'.pdf' )){
            sleep(1);
        }

        $file = File::get( $output.'.pdf' );

        return Response::make($file, 200,
            array(
                'Content-type' => 'application/pdf',
                'Content-Disposition' => 'filename="'.$filename.'.pdf"'
            )
        );
    }

    public function getPrintBalanceDetailXlsx($para) {
        $jasper = new JasperPHP();
        $database = \Config::get('database.connections.mysql');
        $filename = 'SB_'.time();
        $para_values = explode("@", $para);
        $parameter = [
            'from_date'=>$para_values[0],
            'to_date'=>$para_values[1],
            'brand_id'=>$para_values[2],
            'ids'=>$para_values[3],
            'logo'=>storage_path().'/app/uploads/logo.png'
        ];
        $input = base_path().'/app/Reports/rpt_supplier_balance_detail.jasper';
        $output = public_path().'/output_reports/'.$filename;
        $jasper->process($input, $output, array('xlsx'), $parameter, $database)->execute();

        while (!file_exists($output . '.xlsx' )){
            sleep(1);
        }

        $file = File::get( $output . '.xlsx' );
        unlink($output . '.xlsx');

        return Response::make($file, 200,
            array(
                'Content-type' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'Content-Disposition' => 'filename="'.$filename.'.xlsx"'
            )
        );
    }

    public function postSwitchToBrand(){
        $para = Request::all();
        $brand_id = $para['brand_id'];
        $brand = DB::table('gold_brands')->where('id', $brand_id)->first();
        if($brand) {
            Session::put('admin_brand', $brand->id);
            Session::put('admin_brand_name', $brand->name);
        }
        return response()->json(['result'=>true, 'brand'=>$brand]);
    }
}
